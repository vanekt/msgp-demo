// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package json

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson42239ddeDecodeMsgpJson(in *jlexer.Lexer, out *Boo) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Bar":
			out.Bar = string(in.String())
		case "Baz":
			out.Baz = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson42239ddeEncodeMsgpJson(out *jwriter.Writer, in Boo) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Bar\":")
	out.String(string(in.Bar))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Baz\":")
	out.Float64(float64(in.Baz))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Boo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeMsgpJson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Boo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeMsgpJson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Boo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeMsgpJson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Boo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeMsgpJson(l, v)
}
